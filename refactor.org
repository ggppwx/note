#+TITLE: refactoring 
#+BEGIN_HTML
---
layout: post
title: code refactoring 
date: 2016-08-07
tags: [notes, code, video]
descritipn: refactoring 
---
#+END_HTML


* outline [2/3]
18 vidos in total, 15 min each tutorial 
- [X]
- [X]
- [ ]

* introduction 

** What is Refactoring
Refactoring makes code understandable and easy to extend
Refactoring makes it quicker to create complicated systems

** Why Should you Refactor

You remove excess code so it is easier to understand & modify
By refactoring code you can better understand others code
You eliminate the having to remember what old code does
You can write code quicker

** What Are Bad Smells?
Bad smells are common design problems
Bad design is normally unclear, complicated or duplicated

*** The Bad Smells
- Duplicated Code
- Long Methods
- Complex Conditional Statements
- Primitive Obsession
- Indecent Exposure
- Solution Sprawl
- Alternative Classes with Different Interfaces
- Lazy Classes
- Large Classes
- Switch Statements
- Combinatorial Explosions
- Oddball Solutions



** Creation Problems
*** Creation Method
Replace Constructors with Creation Methods
Which constructor should be called?
Wish constructors had descriptive names?
Constructors canâ€™t have the same attribute signatures

#+BEGIN_SRC java
public static FootballPlayer create(...) { 
  return new FootballPlayer(passerRating, rushingYards, 0, 0, 0, 0, 0.0,
                          0.0, 0.0);
}
#+END_SRC

*** Avoid Duplication & Chain Constructors

More constructors, More problems
General purpose constructors save the day

#+BEGIN_SRC java
public FootballPlayer(String playName, String college){
 this(playName, college, 0);
}
#+END_SRC




* extract methods 
make code readable, etract methods from a huge function block 

#+BEGIN_SRC java
public static double getAvgDashTime() {...}
#+END_SRC

** extracting methods not make sense 
#+BEGIN_SRC java
String inTop15 = (avg < 4.4 ) ? "top15" : "\n";
#+END_SRC

** when not to use temp 
- temps holding return value and used once  
- replace temp var with query 
#+BEGIN_SRC java
if ( avgDashTime() > 4 ) { ... } 
#+END_SRC



* Using variables 
** explaining variable
- save the condition to a variable
- dont assign many diff value to a constant
- dont assign value to the para passed to method 
#+BEGIN_SRC java
private int quantity;
// a temp variable 
final boolean over50Products = (quantity > 50);


// explaining variable for calculation
for( Product product : products ) {
  final int numberOfProducts = product.getNumber();
  final double costWithDiscount = ..;
}

double temp = 100 ; /* bad naming covention */
temp = temp + shipping; /* bad */


public doulbe getTotPrice(double price ){
  price = price + 10; // bad 
}

#+END_SRC





* extractig methods, types to class objects 

#+BEGIN_SRC java
public class Customer {
  private int price; // generate setter & getter
  // generate constructor 

  // ..... 
  private Birthday birthday = null;
}

// extract the address class from Customer
public class Address {
  // define string method 
  public String toString() {
    // ... 
  }
}

// extract birthday from the Customer
public Birthday {
}
#+END_SRC 

* refactoring by using factory method 
#+BEGIN_SRC java
public abstract class Custom2 {
  private String custRating;
  static final int PREMIER = 2;
  static final int VALUED =1;

  // getter & setter for custRating
}

class Premier extends Customer2 {
  Premier(){
    // set the value
  }
}


// bad 
class CustomerFactory {
  public Customer2 getCustomer(int custType) {
    switch(custType){
      // 
    }
  }
}
Customer2 c = c.getCustomer(1);

// dynamic way to do this
class CustomerFactory {
  public Customer2 getCustomer(String custName) {
    return (Customer2)Class.forName(custName).newInstance();
  }
}

CustomerFactory cf = new CustomerFactory();
Customer2 c = c.getCustomer("Premier");

class GoldWinner extends Athlete {  // class name what test dynamicly 
  public static GoldWinner getInstance(aheleteParameter) {// singleton 
    // .....
  }
}

// singleton factory 
class MedalFactory {
  public Athelete getMedal(String medalType, String name) {  //reflection 
    Class[] aheleteParameter = new Classs[](Stinrg.class);
    Method getInstMethod =  Class.forName(medalType).getMethod("getInstance", aheleteParameter )  
    // mthod name thryin
    // method & value passed to it 

    Object[] p = new Objdec[](new String(name));
    return (Athelete)getInstMethod.invoke(null, params); // 
  }

}


#+END_SRC


* conditional statement
- use strategy to replace conditional statement 
#+BEGIN_SRC java
// condition into method
if(bagweight[i] < 50 ) {
  bagfee += 25;
}else{
 // ....
}
// ------>
int bagweightunder50(int i){
  return i < 10 ? 25 : 100;
}
bagfee += bagweightunder50(i)


// replace condition with poly 
static makeSound(String animal){
  switch(animal) {
    case "Dog":
      break;
    case "cat":
      break;
  }
}
// ------ > 
class Animal {
  public void makeSound() {}
}
class Dog extends Animal {
  public void makeSound() {}
}
Animal a = new Dog();
a.makeSound();



#+END_SRC 

* strategy pattern for conditional statement
- conditional logic often decide which algo to use, strategy to eliminate it
#+BEGIN_SRC java
// stragegy pattern
class Employee{
  protected double salary = 0.0;
  public Pay paytype = new NoBonus();
  
  public setBounesOption(Pay newPaytype){
    paytype = newpaytype;
  }  
  public getPay(){
    return paytype.getPay(this.salary);
  )
}

// it's a strategy,
// getPay() is not based on if-else logic 
interface Pay{
  double getPay(double salary);
}

// algorighm 1
// instead of using if-else, we use polymorphism to determine
// which algo we use. 
class GetBonus implements Pay{
  public double getPay(double salary){
    return salary * 1.5;
  }
}
#+END_SRC
