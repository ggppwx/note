# TITLE: heap

* 451 Sort Characters By Frequency
Given a string, sort it in decreasing order based on the frequency of characters.
Example 1:

Input:
"tree"
Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"
Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"
Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
** hint 
- just simply use map, one time pass good.
- considering use heap ?


* ugly number 2
Write a program to find the n-th ugly number.
Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. 
For example, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.
Note that 1 is typically treated as an ugly number, and n does not exceed 1690.

** hint
 - easy version of previous problem 
 - it's a 3 pointer problem 
 - what if there are only 2 prime number ? 2 pointer problem 

* {{{color(red, Easy)}}}
* min stack                                                            :WARN:
** summary
   - 做的不好，限制条件完全没有考虑
     use a stack to track min, only pops when nums.pop() <= minlast
     python = [] is a list 
   - access time: O(1)

* valid parathesis
** thoughts 
   intuition is to use a stack 
** summary
  - 不要背题目！！！! ! ! 背思路
  - python[-1] need to check index
    - a = '' if not list else list[-1]
  - O(n)


* TODO 496. Next Greater Element I
** problem
You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.
The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.
** Thoughts
   - using stack to get the next lager number
   - using hash_map to save the relationship
** code
    #+begin_src python
class Solution(object):

    def nextGreaterElement(self, findNums, nums):
        num_map = {}
        stack = []
        for i, num in enumerate(nums):
            while stack and num > stack[-1]:
                last = stack.pop()
                num_map[last] = num
            
            stack.append(num)
            
        return [ num_map.get(n, -1) for n in findNums]
        
    #+end_src


* {{{color(red, Medium)}}}
* Kth Smallest Element in a Sorted Matrix                             :ERROR:
** problem
** Thoughts
   - kth smallest, use heap. 
     - python heapq, push/pop O(logn)
   - no extra space heap?
   - binary search 
** code
    #+begin_src python
class Solution(object):
    def kthSmallest(self, matrix, k):
        import heapq 
        INT_MAX = 2**31 -1 
        n = len(matrix)
        result = None
        min_heap = []
        for i in range(n):
            for j in range(n):
                heapq.heappush(min_heap, matrix[i][j])
        
        for i in range(k):
            result = heapq.heappop(min_heap)
        return result 
    #+end_src


* Flatten Nested List Iterator
** problem
Given a nested list of integers, implement an iterator to flatten it.
** Thoughts
   - recursive solution to flaten a nested structure
   - iteator: i.next() ---> val[i++]   i.hasnext() ---> i+1 < len(val)
** code
    #+begin_src python
class NestedIterator(object):
    # iterator is a class object 
    def __init__(self, nestedList):
        self._data = list(nestedList)
        self._f_data = self.flatten(self._data)
        self._index = -1
        
    def flatten(self, data):
        # if data is list
        result = []
        # instance(data, class_name) to check the type
        if isinstance(data, list):
            for d in data:
                result += self.flatten(d)
        elif isinstance(data, NestedInteger): # note the argument type 
            if data.isInteger():
                result.append(data.getInteger())
            else:
                result = result + self.flatten(data.getList())                                
        else:
            raise Exception("not supported")
        return result 

    def next(self):
        """
        :rtype: int
        """
        self._index += 1
        result = self._f_data[self._index]
        return result 

    def hasNext(self):
        """
        :rtype: bool
        """
        return self._index < len(self._f_data)-1        
    #+end_src




* 856. Score of Parentheses
** problem
Given a balanced parentheses string S, compute the score of the string based on the following rule:
() has score 1
AB has score A + B, where A and B are balanced parentheses strings.
(A) has score 2 * A, where A is a balanced parentheses string.
** Thoughts
   - simple *Stack* problem 
   - 要考虑多种情况，比如最后不是求stack[0], ()() => 1, 1
** code
    #+begin_src python
class Solution(object):
    def scoreOfParentheses(self, S):
        if not S:
            return 0
        
        stack = []
        for s in S:
            if s == ')':
                val = 0
                while stack and stack[-1] != '(':  # search back in the stack 
                    val += stack.pop()
                    
                # now it's '('
                stack.pop()
                if val == 0:
                    stack.append(1)
                else:
                    stack.append(val * 2)
            else:
                stack.append(s)
        
        return sum(stack)  # () () 
    #+end_src


* 739. Daily Temperatures                                             :ERROR:
** problem
Given a list of daily temperatures, produce a list that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.
For example, given the list temperatures = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].
Note: The length of temperatures will be in the range [1, 30000]. Each temperature will be an integer in the range [30, 100].
** Thoughts
   - naive solution O(n^2) exceeding time 
   - save the index, the gap will be differnce of index (index_a - index_b ) 
     so that you don't have to go through it again to get the gap 
   - python optimization:
     - reverse() costly 
     - append() time >> array assignment 
       so init the list at begining rather than append()
** code
    #+begin_src python
class Solution(object):
    def dailyTemperatures(self, temperatures):
        result = [0] * len(temperatures)
        stack = [] # stack maintains the all values ascending order
        for i in range(len(temperatures)):
            ik = len(temperatures) - 1 - i
            t = temperatures[ik]
            while stack and t >= stack[-1][0]:
                stack.pop()
            
            if stack:
                result[ik] = i - stack[-1][1]
                
            stack.append((t, i))
        
        return result 
    #+end_src



* 636. Exclusive Time of Functions
** problem
Input:n = 2
logs = 
["0:start:0",
 "1:start:2",
 "1:end:5",
 "0:end:6"]
Output:[3, 4]
Explanation:
Function 0 starts at time 0, then it executes 2 units of time and reaches the end of time 1. 
Now function 0 calls function 1, function 1 starts at time 2, executes 4 units of time and end at time 5.
Function 0 is running again at time 6, and also end at the time 6, thus executes 1 unit of time. 
So function 0 totally execute 2 + 1 = 3 units of time, and function 1 totally execute 4 units of time.
** Thoughts
   - stack approach, simmilar to matching brace 
** code
    #+begin_src python
class Solution(object):
    def exclusiveTime(self, n, logs):
        result = [0] * n
        stack = []
        for log in logs:
            l = log.split(':')
            job = int(l[0])
            op = l[1]
            time = int(l[2])
            
            if op == 'end':
                tmp = 0
                while stack[-1][1] != 'start': # go back to the previious start 
                    last  = stack.pop()
                    tmp += last[2]
                    
                period = time - stack[-1][2] + 1
                stack.pop()
                stack.append((job, 'acc', period)) # putting accumulative time 
                result[job] += period - tmp  # total time to previous start - other function time               
            else:            
                stack.append((job, op, time))
                
        return result 
    #+end_src


* 503. Next Greater Element II                                         :WARN:
** problem
Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.
** Thoughts
   - ending condition, it meets the exact same number again 
     - saving index as a flag to check if number is exact the same 
** code
    #+begin_src python
class Solution(object):
    def nextGreaterElements(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        result = [-1] * len(nums)
        stack = []
        for _ in range(2):
            for idx, num in enumerate(nums):
                while stack and num > stack[-1][0]:
                    last = stack.pop()
                    result[last[1]] = num
                    
                if stack and stack[-1][1] == idx:
                    return result
                    
                stack.append((num, idx))
        return result 
                    
    #+end_src
** summary
   - better solution ? 


* 331. Verify Preorder Serialization of a Binary Tree
** problem
One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.
** Thoughts
   - 找规律。
   - finding leaf, then replace leaf 
** code
    #+begin_src python
class Solution(object):
    def isValidSerialization(self, preorder):
        """
        :type preorder: str
        :rtype: bool
        """
        if not preorder:
            return False
        
        orders  = preorder.split(',')
        stack = []
        for order in orders:
            stack.append(order)
            while True:
                if len(stack) >= 3 and stack[-1] == '#' and stack[-2] == '#' and stack[-3] != '#':
                    stack.pop()
                    stack.pop()
                    stack.pop()
                    stack.append('#')
                else:
                    break
        if len(stack) == 1 and stack[0] == '#':
            return True
        
        return False                
    #+end_src
** summary







* 641. Design Circular Deque
** problem
Design your implementation of the circular double-ended queue (deque).
Your implementation should support following operations:
** Thoughts
   - use 2 ponter begin, end to track insert/push
** code
    #+begin_src python
class MyCircularDeque(object):

    def __init__(self, k):
        """
        Initialize your data structure here. Set the size of the deque to be k.
        :type k: int
        """
        self._k = k
        self._queue = [None] * k
        self._begin = 0
        self._end = 0
        self._size = 0
        

    def insertFront(self, value):
        """
        Adds an item at the front of Deque. Return true if the operation is successful.
        :type value: int
        :rtype: bool
        """
        if self._size >= self._k:
            return False 
        
        self._begin = (self._begin - 1 + self._k) % self._k
        self._queue[self._begin] = value
        self._size += 1
        return True

    def insertLast(self, value):
        """
        Adds an item at the rear of Deque. Return true if the operation is successful.
        :type value: int
        :rtype: bool
        """
        if self._size >= self._k:
            return False
        
        self._queue[self._end] =value
        self._end = (self._end +  1) % self._k
        self._size += 1
        return True
        

    def deleteFront(self):
        """
        Deletes an item from the front of Deque. Return true if the operation is successful.
        :rtype: bool
        """
        if self._size == 0:
            return False
        
        self._queue[self._begin] = None
        self._begin = (self._begin + 1 ) % self._k
        self._size -= 1
        return True
        

    def deleteLast(self):
        """
        Deletes an item from the rear of Deque. Return true if the operation is successful.
        :rtype: bool
        """
        if self._size == 0:
            return False
        
        self._end = (self._end - 1 + self._k ) % self._k
        self._queue[self._end] = None
        self._size -= 1
        return True
        

    def getFront(self):
        """
        Get the front item from the deque.
        :rtype: int
        """
        if self._size == 0:
            return -1
        return self._queue[self._begin]
        

    def getRear(self):
        """
        Get the last item from the deque.
        :rtype: int
        """
        if self._size == 0:
            return -1
        return self._queue[self._end-1]
        

    def isEmpty(self):
        """
        Checks whether the circular deque is empty or not.
        :rtype: bool
        """
        return self._size == 0
        

    def isFull(self):
        """
        Checks whether the circular deque is full or not.
        :rtype: bool
        """
        return self._size == self._k
        
    #+end_src
** summary
   - 看清题目要求



* 659. Split Array into Consecutive Subsequences                      :ERROR:
** problem
You are given an integer array sorted in ascending order (may contain duplicates), you need to split them into several subsequences, where each subsequences consist of at least 3 consecutive integers. Return whether you can make such a split.
** Thoughts
** code
   #+begin_src python

   #+end_src
** summary




* 767. Reorganize String
** problem
Given a string S, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.
If possible, output any possible result.  If not possible, return the empty string.
** Thoughts
   - how to arange ? 
     - a ... a .. a ...
     - a b .. a b .. a c ..
   - so we can use multiple stacks each stack starting with a ( the most letter ) 
** code
    #+begin_src python
class Solution(object):
    def reorganizeString(self, S):
        c_map = {}
        for c in S:
            c_map[c] = c_map.get(c, 0) + 1
        
        stacks = []
        c_items = sorted(c_map.iteritems(), key = lambda (k, v) : (v, k), reverse=True)
        stack_len = c_items[0][1]
        for _ in range(stack_len):
            stacks.append([])
        index = 0
        for key, val in c_items:
            for i in range(val):
                stacks[index%stack_len].append(key)
                index += 1
        
        result = ""
        for stack in stacks:
            tmp = ''.join(stack)
            if result and  result[-1] == tmp[0]:
                return ""
            
            result += tmp
        return result 
            
    #+end_src
** summary


* 735. Asteroid Collision
** problem
Example 1:
Input: 
asteroids = [5, 10, -5]
Output: [5, 10]
Explanation: 
The 10 and -5 collide resulting in 10.  The 5 and 10 never collide.
** Thoughts
   - simple stack problem
   - 分类讨论，不一定要想到最巧的方法
** code
    #+begin_src python
class Solution(object):
    def asteroidCollision(self, asteroids):
        """
        :type asteroids: List[int]
        :rtype: List[int]
        """
        stack = []
        for a in asteroids:
            if a > 0:
                stack.append(a)
                continue
            
            # a < 0
            add = True
            while stack:
                last = stack[-1]
                if last < 0:
                    add = True
                    break
                else:
                    if abs(last) > abs(a):
                        add = False
                        break
                    elif abs(last) < abs(a):
                        add = True
                        stack.pop()
                    else:
                        stack.pop()
                        add = False
                        break
            
            if add:
                stack.append(a)
                        
        return stack 
                
    #+end_src
** summary




* 743. Network Delay Time
** problem
There are N network nodes, labelled 1 to N.
Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.
Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.
** Thoughts
   - everytime getting the min cost 
     - thinking to use min heap 
** code
    #+begin_src python
class Solution(object):
    def networkDelayTime(self, times, N, K):
        times_map = {}
        for time in times:
            times_map[time[0]] = times_map.get(time[0], []) + [time]        
        
        visit_map = {}
        
        total = 0
        import heapq
        minheap = [(0, -1, K)]
        while minheap:
            min_edge = heapq.heappop(minheap)
            u = min_edge[1]
            v = min_edge[2]
            w = min_edge[0]
            
            if v in visit_map:
                continue
            
            visit_map[v] = True
            total += w
            
            # update minheap
            for i in range(len(minheap)):
                minheap[i] = (minheap[i][0] - w , minheap[i][1], minheap[i][2])
                
            # finding its neighbor and add them 
            for i, edge in enumerate(times_map.get(v, [])):
                if edge:
                    heapq.heappush(minheap, (edge[2], edge[0], edge[1]))
                    times_map[v][i] = None
        

        if len(visit_map) != N:
            return -1
        
        return total 
        
    #+end_src
** summary
   - setting visited, need to be careful !
     - in this case, after we pop, do setting visited 

