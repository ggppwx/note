#+TITLE: clean code notes

* content
  
** meaningful name
- shorter name better
- no confusions, don't name 'List' if it is not a list
- pronounceable names 
- search-able names, not too common 
- no prefixes like m_
- class method should have verb 
- don't add extra context 


** functions 
- small function 
  - one line in if-else block, this should be a function 
- do one thing 
  - means steps on one level consists of one thing
  - one level of abstraction per function
- replace switch with polymorphism
- don't be afraid of using long descriptive name
- less function arguments 
  - transform function should return the value after transformation
  - flag argument is UGLY
  - be aware of dyadic function.
  - wrap arguments by using objects
  - argument list 
  - verb + noun function name 
- no side effects, no hidden things 
- in general, output argument should be avoided 
- separate command & query 
  - error code vs try-catch
- duplication may be evil in software
- no continue, break, never go to
- functions are verb, classes are noun



** comments
- comments are always failure 
- TRUTH SHOULD BE IN CODE



** formatting 
- variable declaration, local variables should be declared on the top of the function 
- functions caller should be above callee
- example 
#+BEGIN_SRC java
public class CodeAnalyzer implements JavaFileAnalysis {  
  private int lineCount;  
  private int maxLineWidth;  
  private int widestLineNumber;  
  private LineWidthHistogram lineWidthHistogram;  
  private int totalChars;  
  
  public CodeAnalyzer() {    
    lineWidthHistogram = new LineWidthHistogram();  
  }  

  public static List<File> findJavaFiles(File parentDirectory) {    
    List<File> files = new ArrayList<File>();    
    findJavaFiles(parentDirectory, files);    
    return files;  
  }
}
#+END_SRC
- instance variables should be declared at the top of the class 
  - in c++ on bottom 
  - java on top 

- white spaces 
- expand the indent , not in one-line


** objects and data structure
- object or data structure: 2 approaches 
  - data structure: expose data, no function. 
- OO code makes easy to add new classes without changing methods
- procedural code makes it hard to add new data structure, easy to add functions
- hybrids are worst 
- data transfer object. 
  - active record, a special form of DTO. having public ( or bean accessed) variables
    and navigational methods like save/find

** unit tests
- laws of TDD:
  - write failing unit test. 
- test and production code are written together
- having dirty test = having no test
- test code is as important as the production one
- readability is very important !
- build - operate - check pattern
- one assert per test
- single concept per test
- FIRST rule
  - fast
  - independent on each other
  - repeatable in any environment
  - self-validating: fail or pass, not a log line
  - timely: should be written before the production code that makes them pass 

