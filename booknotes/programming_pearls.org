#+TITLE: reading notes of the book programming pearls 
#+BEGIN_HTML
---
layout: post
title: programming pearls 
date: 2016-08-08
tags: [notes, code]
description: note for programming pearls
---
#+END_HTML



* DONE Part 1 


* TODO Part 2 [40%]
** chap 6
** chap 7

** DONE chap 8 
   CLOSED: [2016-04-27 Wed 23:57]
*** simple algorithm
problem: find the max subvector of a vector  
- simple solution O(n^3) solution :: get sum for all sub-vector 

**** quadratic algorithms, 2 solutions
#+BEGIN_SRC c++
// solution 1
int maxsofar; 
for (int i = 0; i < n; ++i) {
  sum = 0; 
  for(int j = i+1; j < n; ++j){
    sum += x[j];
    maxsofar = sum > maxsofar ? sum : maxsofar;
  }
  
}

// solution 2
int sumfrom[];
for (int i = 0; i < n; ++i){
  sumfrom[i] = n[i] + sumfrom[i-1];
}
int maxsofar;
for(int i = 0; i < n; ++i ){
  for (int j = i + 1; j < n; ++j) {
    sum = sumfrom[j] - sumfrom[i-1];
    maxsofar = sum > maxsofar ? sum : maxsofar;
  }
}
#+END_SRC 

**** divide & conquer   
to solve a prolem with size n, solve the 2 sub problems with size n/2
T(n) = 2T(n/2) + O(n)   ==> nlog(n)
#+BEGIN_SRC c++
int maxsum(int l; int r){
   // exit condition 
   if (l> r) return 0; 
   if (l == r ) return n[l] > 0 ? n[l] : 0; 

   int m = (l + r)/2;

   // lmax from m towards left
   // rmax from m towards right 
   return max(maxsum(0, m), maxsum(m,r), lmax + rmax);
}
#+END_SRC

**** scanning (linear ) 
#+BEGIN_SRC c++
// kadane algorithm
for (int i = 0; i< n ; ++i){
  // should we include i ? when adding i, if the sub vector > 0
  maxextendinghere = max(maxextendinghere + n[i], 0); 
  maxsofar = max(maxsofar, maxextendinghere); // new max so far
}

// similar to 
int maxsofar = 0
for (int i = 0; i < n ; ) {
    int j = i +1; 
    while(extending > 0 && j < n){
      extending += n[j];
      maxsofar = max(maxsofar, extending);
      j ++;
    }
    i = j;
}

#+END_SRC

*** final 
- when comparing algorithm with diff time complexity, the constant doesn't matter a lot
- original problem is for 2 demension

*** practice
**** kadane algorithm for a matric 
https://www.youtube.com/watch?v=yCQN096CwWM
#+BEGIN_SRC c++

int kadane(vector<int> input, int& left, int& right);
int findMaxOfMatrix(vector<vector<int> > matrix ){
// from rightmost column. 
// left = column 1 -> n, right = column 1 -> n
// variable: for a rectangular, we have left, right(indicated above), 
// up, down(calculated by kadane). 




#+END_SRC
** DONE chap 9 
   CLOSED: [2016-04-28 Thu 23:58]
*** typical problem 
- a memory allocator, malloc is hit too many times
  - caching, data access most should be cheapest to access 
  - profiling to identify the hot spot 

- first aid sampler
  - replace the % operator 
  - functions, macros, inline code    
    #+BEGIN_SRC c++
       #define max(a, b) ((a) > (b)) ? (a) : (b) // old c program 
    #+END_SRC
    - macro not always work
    - inline in c++ is good 
  - reduce the test in for loop
    #+BEGIN_SRC c++
      x[n] = t;
      for(int i=0; ;++i) {
        if (x[i] == t ) break;
      }
    #+END_SRC
  - choose the suitable data structure. 
- binary search tuning 
*** principles 
- role of efficiency
- measure of tools 
  - when efficiency is a problem, first step is to profile the system
- sometimes speedups are slowdowns
- key words
  + exploit algebranic identity
  + caching
  + macro, inline
  + combine test
  + loop unrolling
  + data structure augumentation
 


** TODO chap 10
*** reduce space 


** TODO chap 9 
** TODO chap 10

* TODO Part 3 [0%]  
** TODO chap 11
** TODO chap 12
** TODO chap 13
** TODO chap 14
** TODO chap 15
